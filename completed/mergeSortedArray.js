/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
var merge = function (nums1, m, nums2, n) {
  let i = 0;
  let total = m + n;
  while (m <= total - 1) {
    nums1[m] = nums2[i];
    i++;
    m++;
  }
  nums1.sort((a, b) => a - b);
};

console.log(
  merge(
    [
      -10,
      -10,
      -9,
      -9,
      -9,
      -8,
      -8,
      -7,
      -7,
      -7,
      -6,
      -6,
      -6,
      -6,
      -6,
      -6,
      -6,
      -5,
      -5,
      -5,
      -4,
      -4,
      -4,
      -3,
      -3,
      -2,
      -2,
      -1,
      -1,
      0,
      1,
      1,
      1,
      2,
      2,
      2,
      3,
      3,
      3,
      4,
      5,
      5,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      8,
      9,
      9,
      9,
      9,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
    55,
    [
      -10,
      -10,
      -9,
      -9,
      -9,
      -9,
      -8,
      -8,
      -8,
      -8,
      -8,
      -7,
      -7,
      -7,
      -7,
      -7,
      -7,
      -7,
      -7,
      -6,
      -6,
      -6,
      -6,
      -5,
      -5,
      -5,
      -5,
      -5,
      -4,
      -4,
      -4,
      -4,
      -4,
      -3,
      -3,
      -3,
      -2,
      -2,
      -2,
      -2,
      -2,
      -2,
      -2,
      -1,
      -1,
      -1,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      8,
      8,
      8,
      9,
      9,
      9,
      9,
    ],
    99
  )
);
